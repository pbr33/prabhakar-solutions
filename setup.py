#!/usr/bin/env python3
"""
Agent RICH - Configuration Setup Script

This script helps you set up the environment configuration for Agent RICH.
It will create a .env file with your API keys and settings.
"""

import os
import sys
from pathlib import Path

def create_env_file():
    """Create a .env file interactively"""
    
    print("ü§ñ Agent RICH - Configuration Setup")
    print("=" * 50)
    print("This script will help you create a .env file with your API configurations.")
    print("You can skip any field by pressing Enter (default values will be used).\n")
    
    # Check if .env already exists
    env_path = Path('.env')
    if env_path.exists():
        overwrite = input("‚ö†Ô∏è  .env file already exists. Overwrite? (y/N): ").lower()
        if overwrite != 'y':
            print("Setup cancelled.")
            return False
    
    config_data = {}
    
    # EODHD Configuration
    print("üìä EODHD Financial Data API Configuration")
    print("-" * 40)
    config_data['EODHD_API_KEY'] = input("Enter your EODHD API Key (get from https://eodhd.com/): ").strip()
    config_data['EODHD_BASE_URL'] = input("EODHD Base URL [https://eodhd.com/api]: ").strip() or "https://eodhd.com/api"
    config_data['EODHD_TIMEOUT'] = input("Request timeout in seconds [30]: ").strip() or "30"
    
    print("\nü§ñ Azure OpenAI Configuration")
    print("-" * 30)
    config_data['AZURE_OPENAI_API_KEY'] = input("Enter your Azure OpenAI API Key: ").strip()
    config_data['AZURE_OPENAI_ENDPOINT'] = input("Enter your Azure OpenAI Endpoint (e.g., https://your-resource.openai.azure.com/): ").strip()
    config_data['AZURE_CHAT_DEPLOYMENT'] = input("Enter your Chat Deployment Name: ").strip()
    config_data['AZURE_WHISPER_DEPLOYMENT'] = input("Enter your Whisper Deployment Name (optional): ").strip()
    config_data['AZURE_API_VERSION'] = input("Azure API Version [2024-02-01]: ").strip() or "2024-02-01"
    config_data['AZURE_TEMPERATURE'] = input("AI Temperature (0.0-1.0) [0.7]: ").strip() or "0.7"
    config_data['AZURE_MAX_TOKENS'] = input("Max Tokens [4000]: ").strip() or "4000"
    
    print("\nüíº Trading Configuration")
    print("-" * 25)
    config_data['MAX_PORTFOLIO_VALUE'] = input("Max Portfolio Value [1000000]: ").strip() or "1000000"
    config_data['RISK_TOLERANCE'] = input("Risk Tolerance (0.01-0.10) [0.02]: ").strip() or "0.02"
    config_data['ENABLE_PAPER_TRADING'] = input("Enable Paper Trading (true/false) [true]: ").strip() or "true"
    
    print("\n‚öôÔ∏è Application Settings")
    print("-" * 20)
    config_data['DEBUG_MODE'] = input("Debug Mode (true/false) [false]: ").strip() or "false"
    config_data['USE_CACHE'] = input("Use Caching (true/false) [true]: ").strip() or "true"
    config_data['CACHE_TIMEOUT'] = input("Cache Timeout in seconds [300]: ").strip() or "300"
    config_data['MAX_TICKERS_DISPLAY'] = input("Max Tickers to Display [100]: ").strip() or "100"
    
    print("\nüîê Authentication Settings")
    print("-" * 25)
    config_data['DEMO_USERNAME'] = input("Demo Username [genaiwithprabhakar]: ").strip() or "genaiwithprabhakar"
    config_data['DEMO_PASSWORD'] = input("Demo Password [genaiwithprabhakar]: ").strip() or "genaiwithprabhakar"
    config_data['ENABLE_GUEST_MODE'] = input("Enable Guest Mode (true/false) [true]: ").strip() or "true"
    
    # Write the .env file
    try:
        with open('.env', 'w') as f:
            f.write("# Agent RICH Configuration\n")
            f.write("# Generated by setup script\n")
            f.write("# Do not commit this file to version control!\n\n")
            
            # EODHD
            f.write("# EODHD Configuration\n")
            f.write(f"EODHD_API_KEY={config_data['EODHD_API_KEY']}\n")
            f.write(f"EODHD_BASE_URL={config_data['EODHD_BASE_URL']}\n")
            f.write(f"EODHD_TIMEOUT={config_data['EODHD_TIMEOUT']}\n\n")
            
            # Azure OpenAI
            f.write("# Azure OpenAI Configuration\n")
            f.write(f"AZURE_OPENAI_API_KEY={config_data['AZURE_OPENAI_API_KEY']}\n")
            f.write(f"AZURE_OPENAI_ENDPOINT={config_data['AZURE_OPENAI_ENDPOINT']}\n")
            f.write(f"AZURE_CHAT_DEPLOYMENT={config_data['AZURE_CHAT_DEPLOYMENT']}\n")
            f.write(f"AZURE_WHISPER_DEPLOYMENT={config_data['AZURE_WHISPER_DEPLOYMENT']}\n")
            f.write(f"AZURE_API_VERSION={config_data['AZURE_API_VERSION']}\n")
            f.write(f"AZURE_TEMPERATURE={config_data['AZURE_TEMPERATURE']}\n")
            f.write(f"AZURE_MAX_TOKENS={config_data['AZURE_MAX_TOKENS']}\n\n")
            
            # Trading
            f.write("# Trading Configuration\n")
            f.write(f"MAX_PORTFOLIO_VALUE={config_data['MAX_PORTFOLIO_VALUE']}\n")
            f.write(f"RISK_TOLERANCE={config_data['RISK_TOLERANCE']}\n")
            f.write(f"ENABLE_PAPER_TRADING={config_data['ENABLE_PAPER_TRADING']}\n\n")
            
            # App Settings
            f.write("# Application Settings\n")
            f.write(f"DEBUG_MODE={config_data['DEBUG_MODE']}\n")
            f.write(f"USE_CACHE={config_data['USE_CACHE']}\n")
            f.write(f"CACHE_TIMEOUT={config_data['CACHE_TIMEOUT']}\n")
            f.write(f"MAX_TICKERS_DISPLAY={config_data['MAX_TICKERS_DISPLAY']}\n\n")
            
            # Auth
            f.write("# Authentication Settings\n")
            f.write(f"DEMO_USERNAME={config_data['DEMO_USERNAME']}\n")
            f.write(f"DEMO_PASSWORD={config_data['DEMO_PASSWORD']}\n")
            f.write(f"ENABLE_GUEST_MODE={config_data['ENABLE_GUEST_MODE']}\n")
        
        print("\n‚úÖ Configuration saved to .env file!")
        print("\nüîí Security Note: The .env file contains sensitive information.")
        print("   Make sure it's listed in your .gitignore file!")
        
        # Check if .gitignore exists and contains .env
        gitignore_path = Path('.gitignore')
        if gitignore_path.exists():
            content = gitignore_path.read_text()
            if '.env' not in content:
                print("\n‚ö†Ô∏è  Warning: .env is not in your .gitignore file!")
                add_to_gitignore = input("   Add .env to .gitignore? (Y/n): ").lower()
                if add_to_gitignore != 'n':
                    with open('.gitignore', 'a') as f:
                        f.write('\n# Environment variables\n.env\n')
                    print("   ‚úÖ Added .env to .gitignore")
        else:
            print("\nüìù Creating .gitignore file...")
            with open('.gitignore', 'w') as f:
                f.write("# Environment variables\n.env\n")
                f.write("\n# Python\n__pycache__/\n*.pyc\n*.pyo\n")
                f.write("\n# IDE\n.vscode/\n.idea/\n")
                f.write("\n# OS\n.DS_Store\nThumbs.db\n")
            print("   ‚úÖ Created .gitignore with .env entry")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error creating .env file: {e}")
        return False

def validate_config():
    """Validate the current configuration"""
    print("\nüîç Validating Configuration...")
    print("-" * 30)
    
    try:
        from config import config
        
        validation = config.validate_config()
        
        print(f"EODHD API: {'‚úÖ Configured' if validation['eodhd'] else '‚ùå Missing'}")
        print(f"Azure OpenAI: {'‚úÖ Configured' if validation['azure_openai'] else '‚ùå Missing'}")
        print(f"App Settings: {'‚úÖ Valid' if validation['app'] else '‚ùå Invalid'}")
        print(f"Trading Config: {'‚úÖ Valid' if validation['trading'] else '‚ùå Invalid'}")
        print(f"Auth Config: {'‚úÖ Valid' if validation['auth'] else '‚ùå Invalid'}")
        
        if all(validation.values()):
            print("\nüéâ All configurations are valid!")
            return True
        else:
            print("\n‚ö†Ô∏è  Some configurations are missing or invalid.")
            return False
            
    except ImportError:
        print("‚ùå Could not import config module. Make sure you're in the right directory.")
        return False
    except Exception as e:
        print(f"‚ùå Error validating config: {e}")
        return False

def install_dependencies():
    """Install required Python packages"""
    print("\nüì¶ Installing Dependencies...")
    print("-" * 25)
    
    requirements = [
        "streamlit",
        "python-dotenv",
        "langchain-openai",
        "pandas",
        "plotly",
        "requests"
    ]
    
    try:
        import subprocess
        
        for package in requirements:
            print(f"Installing {package}...")
            result = subprocess.run([sys.executable, "-m", "pip", "install", package], 
                                  capture_output=True, text=True)
            if result.returncode == 0:
                print(f"  ‚úÖ {package} installed successfully")
            else:
                print(f"  ‚ùå Failed to install {package}: {result.stderr}")
                
    except Exception as e:
        print(f"‚ùå Error installing dependencies: {e}")

def main():
    """Main setup function"""
    print("üöÄ Welcome to Agent RICH Setup!")
    print("=" * 40)
    
    while True:
        print("\nChoose an option:")
        print("1. Create/Update Environment Configuration")
        print("2. Validate Current Configuration")
        print("3. Install Required Dependencies")
        print("4. Show Configuration Status")
        print("5. Exit")
        
        choice = input("\nEnter your choice (1-5): ").strip()
        
        if choice == '1':
            success = create_env_file()
            if success:
                print("\nüéØ Next Steps:")
                print("   1. Review the .env file")
                print("   2. Run option 2 to validate your configuration")
                print("   3. Start the application with: streamlit run main.py")
        
        elif choice == '2':
            validate_config()
        
        elif choice == '3':
            install_dependencies()
        
        elif choice == '4':
            show_config_status()
        
        elif choice == '5':
            print("\nüëã Setup complete! Happy trading with Agent RICH!")
            break
        
        else:
            print("‚ùå Invalid choice. Please enter 1-5.")

def show_config_status():
    """Show detailed configuration status"""
    print("\nüìä Configuration Status Report")
    print("=" * 40)
    
    env_file = Path('.env')
    example_file = Path('.env.example')
    gitignore_file = Path('.gitignore')
    
    # File existence checks
    print("üìÅ File Status:")
    print(f"   .env file: {'‚úÖ Exists' if env_file.exists() else '‚ùå Missing'}")
    print(f"   .env.example: {'‚úÖ Exists' if example_file.exists() else '‚ùå Missing'}")
    print(f"   .gitignore: {'‚úÖ Exists' if gitignore_file.exists() else '‚ùå Missing'}")
    
    if gitignore_file.exists():
        content = gitignore_file.read_text()
        env_in_gitignore = '.env' in content
        print(f"   .env in .gitignore: {'‚úÖ Protected' if env_in_gitignore else '‚ö†Ô∏è  Not protected'}")
    
    # Environment variables check
    if env_file.exists():
        print("\nüîß Environment Variables:")
        required_vars = [
            'EODHD_API_KEY',
            'AZURE_OPENAI_API_KEY', 
            'AZURE_OPENAI_ENDPOINT',
            'AZURE_CHAT_DEPLOYMENT'
        ]
        
        # Load environment variables from .env file
        try:
            from dotenv import load_dotenv
            load_dotenv()
            
            for var in required_vars:
                value = os.getenv(var)
                if value:
                    # Show only first 10 chars for security
                    masked_value = value[:10] + "..." if len(value) > 10 else value
                    print(f"   {var}: ‚úÖ Set ({masked_value})")
                else:
                    print(f"   {var}: ‚ùå Not set")
                    
        except ImportError:
            print("   ‚ùå python-dotenv not installed. Run option 3 to install dependencies.")
        except Exception as e:
            print(f"   ‚ùå Error loading .env file: {e}")
    
    # Configuration validation
    print("\nüîç Configuration Validation:")
    try:
        # Try to validate using our config system
        validate_config()
    except Exception as e:
        print(f"   ‚ùå Could not validate configuration: {e}")
    
    # System requirements
    print("\nüì¶ System Requirements:")
    required_packages = [
        'streamlit',
        'python-dotenv', 
        'langchain-openai',
        'pandas',
        'plotly',
        'requests'
    ]
    
    for package in required_packages:
        try:
            __import__(package.replace('-', '_'))
            print(f"   {package}: ‚úÖ Installed")
        except ImportError:
            print(f"   {package}: ‚ùå Not installed")

def create_sample_files():
    """Create sample configuration files"""
    print("\nüìù Creating Sample Files...")
    
    # Create .env.example if it doesn't exist
    example_content = """# Agent RICH Configuration Example
# Copy this file to .env and fill in your actual values

# EODHD Configuration
EODHD_API_KEY=your_eodhd_api_key_here
EODHD_BASE_URL=https://eodhd.com/api
EODHD_TIMEOUT=30

# Azure OpenAI Configuration  
AZURE_OPENAI_API_KEY=your_azure_openai_api_key_here
AZURE_OPENAI_ENDPOINT=https://your-resource.openai.azure.com/
AZURE_CHAT_DEPLOYMENT=your_chat_deployment_name
AZURE_WHISPER_DEPLOYMENT=your_whisper_deployment_name
AZURE_API_VERSION=2024-02-01
AZURE_TEMPERATURE=0.7
AZURE_MAX_TOKENS=4000

# Trading Configuration
MAX_PORTFOLIO_VALUE=1000000
RISK_TOLERANCE=0.02
ENABLE_PAPER_TRADING=true

# Application Settings
DEBUG_MODE=false
USE_CACHE=true
CACHE_TIMEOUT=300
MAX_TICKERS_DISPLAY=100

# Authentication Settings
DEMO_USERNAME=genaiwithprabhakar
DEMO_PASSWORD=genaiwithprabhakar
ENABLE_GUEST_MODE=true
"""
    
    try:
        with open('.env.example', 'w') as f:
            f.write(example_content)
        print("   ‚úÖ Created .env.example")
    except Exception as e:
        print(f"   ‚ùå Error creating .env.example: {e}")

def quick_setup():
    """Quick setup with minimal prompts"""
    print("\n‚ö° Quick Setup Mode")
    print("=" * 20)
    print("This will create a basic configuration with default values.")
    print("You can modify the .env file later with your actual API keys.\n")
    
    proceed = input("Continue with quick setup? (Y/n): ").lower()
    if proceed == 'n':
        return False
    
    # Create basic .env with placeholder values
    basic_config = {
        'EODHD_API_KEY': 'your_eodhd_api_key_here',
        'EODHD_BASE_URL': 'https://eodhd.com/api',
        'EODHD_TIMEOUT': '30',
        'AZURE_OPENAI_API_KEY': 'your_azure_openai_api_key_here',
        'AZURE_OPENAI_ENDPOINT': 'https://your-resource.openai.azure.com/',
        'AZURE_CHAT_DEPLOYMENT': 'your_chat_deployment_name',
        'AZURE_WHISPER_DEPLOYMENT': '',
        'AZURE_API_VERSION': '2024-02-01',
        'AZURE_TEMPERATURE': '0.7',
        'AZURE_MAX_TOKENS': '4000',
        'MAX_PORTFOLIO_VALUE': '1000000',
        'RISK_TOLERANCE': '0.02',
        'ENABLE_PAPER_TRADING': 'true',
        'DEBUG_MODE': 'false',
        'USE_CACHE': 'true',
        'CACHE_TIMEOUT': '300',
        'MAX_TICKERS_DISPLAY': '100',
        'DEMO_USERNAME': 'genaiwithprabhakar',
        'DEMO_PASSWORD': 'genaiwithprabhakar',
        'ENABLE_GUEST_MODE': 'true'
    }
    
    try:
        with open('.env', 'w') as f:
            f.write("# Agent RICH Configuration\n")
            f.write("# Created by quick setup - UPDATE WITH YOUR ACTUAL API KEYS!\n\n")
            
            for key, value in basic_config.items():
                f.write(f"{key}={value}\n")
        
        print("‚úÖ Quick setup complete!")
        print("\n‚ö†Ô∏è  IMPORTANT: Edit the .env file and add your actual API keys:")
        print("   - EODHD_API_KEY")
        print("   - AZURE_OPENAI_API_KEY") 
        print("   - AZURE_OPENAI_ENDPOINT")
        print("   - AZURE_CHAT_DEPLOYMENT")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error in quick setup: {e}")
        return False

if __name__ == "__main__":
    # Check if running from correct directory
    if not Path('main.py').exists():
        print("‚ùå Error: Please run this script from the Agent RICH project directory")
        print("   (The directory containing main.py)")
        sys.exit(1)
    
    # Add enhanced menu with quick setup option
    print("üöÄ Welcome to Agent RICH Setup!")
    print("=" * 40)
    print("Choose setup mode:")
    print("1. Interactive Setup (Recommended)")
    print("2. Quick Setup (Use defaults)")
    print("3. Advanced Options")
    
    setup_choice = input("\nEnter your choice (1-3): ").strip()
    
    if setup_choice == '1':
        main()
    elif setup_choice == '2':
        success = quick_setup()
        if success:
            print("\nüéØ Next steps:")
            print("   1. Edit .env file with your API keys")
            print("   2. Run: python setup.py (choose option 2 to validate)")
            print("   3. Start app: streamlit run main.py")
    elif setup_choice == '3':
        # Create sample files first
        create_sample_files()
        main()
    else:
        print("‚ùå Invalid choice. Running interactive setup...")
        main() 
        